
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00001ec2  00001f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080008e  0080008e  00001f84  2**0
                  ALLOC
  3 .stab         00001938  00000000  00000000  00001f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e15  00000000  00000000  000038bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000046d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004811  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000065ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000074b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008264  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000083c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008e1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3b       	cpi	r26, 0xB0	; 176
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8e 0c 	call	0x191c	; 0x191c <main>
      8a:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 44 0f 	jmp	0x1e88	; 0x1e88 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 34 0f 	jmp	0x1e68	; 0x1e68 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 38 0f 	jmp	0x1e70	; 0x1e70 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DDRA= PORTA_DIR;
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
	DDRB= PORTB_DIR;
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 ee       	ldi	r24, 0xE0	; 224
     b5c:	80 83       	st	Z, r24
	DDRC= PORTC_DIR;
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f e0       	ldi	r24, 0x0F	; 15
     b64:	80 83       	st	Z, r24
	DDRD= PORTD_DIR;
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	
	PORTA=PORTA_INITIAL_VALUE;
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	PORTB=PORTB_INITIAL_VALUE;
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
	PORTC=PORTC_INITIAL_VALUE;
     b78:	e5 e3       	ldi	r30, 0x35	; 53
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	80 83       	st	Z, r24
	PORTD=PORTD_INITIAL_VALUE;
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection  (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	28 97       	sbiw	r28, 0x08	; 8
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a 83       	std	Y+2, r24	; 0x02
     ba2:	6b 83       	std	Y+3, r22	; 0x03
     ba4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     ba6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	88 30       	cpi	r24, 0x08	; 8
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_u8SetPinDirection+0x24>
     bae:	f4 c0       	rjmp	.+488    	; 0xd98 <DIO_u8SetPinDirection+0x20c>
	{
		if (Copy_u8Direction==DIO_u8PIN_OUTPUT)
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <DIO_u8SetPinDirection+0x2c>
     bb6:	72 c0       	rjmp	.+228    	; 0xc9c <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	38 87       	std	Y+8, r19	; 0x08
     bc0:	2f 83       	std	Y+7, r18	; 0x07
     bc2:	8f 81       	ldd	r24, Y+7	; 0x07
     bc4:	98 85       	ldd	r25, Y+8	; 0x08
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	91 05       	cpc	r25, r1
     bca:	49 f1       	breq	.+82     	; 0xc1e <DIO_u8SetPinDirection+0x92>
     bcc:	2f 81       	ldd	r18, Y+7	; 0x07
     bce:	38 85       	ldd	r19, Y+8	; 0x08
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <DIO_u8SetPinDirection+0x54>
     bd6:	8f 81       	ldd	r24, Y+7	; 0x07
     bd8:	98 85       	ldd	r25, Y+8	; 0x08
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <DIO_u8SetPinDirection+0x6a>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <DIO_u8SetPinDirection+0x10a>
     be0:	2f 81       	ldd	r18, Y+7	; 0x07
     be2:	38 85       	ldd	r19, Y+8	; 0x08
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	71 f1       	breq	.+92     	; 0xc46 <DIO_u8SetPinDirection+0xba>
     bea:	8f 81       	ldd	r24, Y+7	; 0x07
     bec:	98 85       	ldd	r25, Y+8	; 0x08
     bee:	83 30       	cpi	r24, 0x03	; 3
     bf0:	91 05       	cpc	r25, r1
     bf2:	e9 f1       	breq	.+122    	; 0xc6e <DIO_u8SetPinDirection+0xe2>
     bf4:	50 c0       	rjmp	.+160    	; 0xc96 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     bf6:	aa e3       	ldi	r26, 0x3A	; 58
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ea e3       	ldi	r30, 0x3A	; 58
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	48 2f       	mov	r20, r24
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	28 2f       	mov	r18, r24
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 2e       	mov	r0, r18
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <DIO_u8SetPinDirection+0x88>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	0a 94       	dec	r0
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <DIO_u8SetPinDirection+0x84>
     c18:	84 2b       	or	r24, r20
     c1a:	8c 93       	st	X, r24
     c1c:	bf c0       	rjmp	.+382    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     c1e:	a7 e3       	ldi	r26, 0x37	; 55
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e7 e3       	ldi	r30, 0x37	; 55
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	48 2f       	mov	r20, r24
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	02 2e       	mov	r0, r18
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <DIO_u8SetPinDirection+0xb0>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <DIO_u8SetPinDirection+0xac>
     c40:	84 2b       	or	r24, r20
     c42:	8c 93       	st	X, r24
     c44:	ab c0       	rjmp	.+342    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     c46:	a4 e3       	ldi	r26, 0x34	; 52
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e4 e3       	ldi	r30, 0x34	; 52
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_u8SetPinDirection+0xd8>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_u8SetPinDirection+0xd4>
     c68:	84 2b       	or	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	97 c0       	rjmp	.+302    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     c6e:	a1 e3       	ldi	r26, 0x31	; 49
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e1 e3       	ldi	r30, 0x31	; 49
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_u8SetPinDirection+0x100>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_u8SetPinDirection+0xfc>
     c90:	84 2b       	or	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	83 c0       	rjmp	.+262    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	80 c0       	rjmp	.+256    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			}
		}
		else if (Copy_u8Direction==DIO_u8PIN_INPUT)
     c9c:	8c 81       	ldd	r24, Y+4	; 0x04
     c9e:	88 23       	and	r24, r24
     ca0:	09 f0       	breq	.+2      	; 0xca4 <DIO_u8SetPinDirection+0x118>
     ca2:	77 c0       	rjmp	.+238    	; 0xd92 <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	3e 83       	std	Y+6, r19	; 0x06
     cac:	2d 83       	std	Y+5, r18	; 0x05
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	91 05       	cpc	r25, r1
     cb6:	59 f1       	breq	.+86     	; 0xd0e <DIO_u8SetPinDirection+0x182>
     cb8:	2d 81       	ldd	r18, Y+5	; 0x05
     cba:	3e 81       	ldd	r19, Y+6	; 0x06
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	2c f4       	brge	.+10     	; 0xccc <DIO_u8SetPinDirection+0x140>
     cc2:	8d 81       	ldd	r24, Y+5	; 0x05
     cc4:	9e 81       	ldd	r25, Y+6	; 0x06
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	69 f0       	breq	.+26     	; 0xce4 <DIO_u8SetPinDirection+0x158>
     cca:	60 c0       	rjmp	.+192    	; 0xd8c <DIO_u8SetPinDirection+0x200>
     ccc:	2d 81       	ldd	r18, Y+5	; 0x05
     cce:	3e 81       	ldd	r19, Y+6	; 0x06
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	89 f1       	breq	.+98     	; 0xd38 <DIO_u8SetPinDirection+0x1ac>
     cd6:	8d 81       	ldd	r24, Y+5	; 0x05
     cd8:	9e 81       	ldd	r25, Y+6	; 0x06
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <DIO_u8SetPinDirection+0x156>
     ce0:	40 c0       	rjmp	.+128    	; 0xd62 <DIO_u8SetPinDirection+0x1d6>
     ce2:	54 c0       	rjmp	.+168    	; 0xd8c <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     ce4:	aa e3       	ldi	r26, 0x3A	; 58
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ea e3       	ldi	r30, 0x3A	; 58
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_u8SetPinDirection+0x176>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_u8SetPinDirection+0x172>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	47 c0       	rjmp	.+142    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     d0e:	a7 e3       	ldi	r26, 0x37	; 55
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e7 e3       	ldi	r30, 0x37	; 55
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_u8SetPinDirection+0x1a0>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_u8SetPinDirection+0x19c>
     d30:	80 95       	com	r24
     d32:	84 23       	and	r24, r20
     d34:	8c 93       	st	X, r24
     d36:	32 c0       	rjmp	.+100    	; 0xd9c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     d38:	a4 e3       	ldi	r26, 0x34	; 52
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e4 e3       	ldi	r30, 0x34	; 52
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 2e       	mov	r0, r18
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <DIO_u8SetPinDirection+0x1ca>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	0a 94       	dec	r0
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <DIO_u8SetPinDirection+0x1c6>
     d5a:	80 95       	com	r24
     d5c:	84 23       	and	r24, r20
     d5e:	8c 93       	st	X, r24
     d60:	1d c0       	rjmp	.+58     	; 0xd9c <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     d62:	a1 e3       	ldi	r26, 0x31	; 49
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e1 e3       	ldi	r30, 0x31	; 49
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_u8SetPinDirection+0x1f4>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_u8SetPinDirection+0x1f0>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	08 c0       	rjmp	.+16     	; 0xd9c <DIO_u8SetPinDirection+0x210>
			default : Local_u8ErrorState=NOK;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d9e:	28 96       	adiw	r28, 0x08	; 8
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	08 95       	ret

00000db0 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection (u8 Copy_u8Port, u8 Copy_u8Direction)
{
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <DIO_u8SetPortDirection+0x6>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <DIO_u8SetPortDirection+0x8>
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
     dc2:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	3d 83       	std	Y+5, r19	; 0x05
     dcc:	2c 83       	std	Y+4, r18	; 0x04
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	9d 81       	ldd	r25, Y+5	; 0x05
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	d1 f0       	breq	.+52     	; 0xe0c <DIO_u8SetPortDirection+0x5c>
     dd8:	2c 81       	ldd	r18, Y+4	; 0x04
     dda:	3d 81       	ldd	r19, Y+5	; 0x05
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	2c f4       	brge	.+10     	; 0xdec <DIO_u8SetPortDirection+0x3c>
     de2:	8c 81       	ldd	r24, Y+4	; 0x04
     de4:	9d 81       	ldd	r25, Y+5	; 0x05
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	61 f0       	breq	.+24     	; 0xe02 <DIO_u8SetPortDirection+0x52>
     dea:	1f c0       	rjmp	.+62     	; 0xe2a <DIO_u8SetPortDirection+0x7a>
     dec:	2c 81       	ldd	r18, Y+4	; 0x04
     dee:	3d 81       	ldd	r19, Y+5	; 0x05
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	31 05       	cpc	r19, r1
     df4:	81 f0       	breq	.+32     	; 0xe16 <DIO_u8SetPortDirection+0x66>
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	9d 81       	ldd	r25, Y+5	; 0x05
     dfa:	83 30       	cpi	r24, 0x03	; 3
     dfc:	91 05       	cpc	r25, r1
     dfe:	81 f0       	breq	.+32     	; 0xe20 <DIO_u8SetPortDirection+0x70>
     e00:	14 c0       	rjmp	.+40     	; 0xe2a <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA: DDRA=Copy_u8Direction; break;
     e02:	ea e3       	ldi	r30, 0x3A	; 58
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	80 83       	st	Z, r24
     e0a:	11 c0       	rjmp	.+34     	; 0xe2e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB: DDRB=Copy_u8Direction; break;
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	80 83       	st	Z, r24
     e14:	0c c0       	rjmp	.+24     	; 0xe2e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC: DDRC=Copy_u8Direction; break;
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	80 83       	st	Z, r24
     e1e:	07 c0       	rjmp	.+14     	; 0xe2e <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD: DDRD=Copy_u8Direction; break;
     e20:	e1 e3       	ldi	r30, 0x31	; 49
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	80 83       	st	Z, r24
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_u8SetPortDirection+0x7e>
	default : Local_u8ErrorState=NOK;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 Copy_u8Value)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	28 97       	sbiw	r28, 0x08	; 8
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	6b 83       	std	Y+3, r22	; 0x03
     e58:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
     e5a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	08 f0       	brcs	.+2      	; 0xe64 <DIO_u8SetPinValue+0x24>
     e62:	f4 c0       	rjmp	.+488    	; 0x104c <DIO_u8SetPinValue+0x20c>
	{
		if (Copy_u8Value==DIO_u8PIN_HIGH)
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_u8SetPinValue+0x2c>
     e6a:	72 c0       	rjmp	.+228    	; 0xf50 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	38 87       	std	Y+8, r19	; 0x08
     e74:	2f 83       	std	Y+7, r18	; 0x07
     e76:	8f 81       	ldd	r24, Y+7	; 0x07
     e78:	98 85       	ldd	r25, Y+8	; 0x08
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	49 f1       	breq	.+82     	; 0xed2 <DIO_u8SetPinValue+0x92>
     e80:	2f 81       	ldd	r18, Y+7	; 0x07
     e82:	38 85       	ldd	r19, Y+8	; 0x08
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_u8SetPinValue+0x54>
     e8a:	8f 81       	ldd	r24, Y+7	; 0x07
     e8c:	98 85       	ldd	r25, Y+8	; 0x08
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	61 f0       	breq	.+24     	; 0xeaa <DIO_u8SetPinValue+0x6a>
     e92:	5b c0       	rjmp	.+182    	; 0xf4a <DIO_u8SetPinValue+0x10a>
     e94:	2f 81       	ldd	r18, Y+7	; 0x07
     e96:	38 85       	ldd	r19, Y+8	; 0x08
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	71 f1       	breq	.+92     	; 0xefa <DIO_u8SetPinValue+0xba>
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	e9 f1       	breq	.+122    	; 0xf22 <DIO_u8SetPinValue+0xe2>
     ea8:	50 c0       	rjmp	.+160    	; 0xf4a <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
     eaa:	ab e3       	ldi	r26, 0x3B	; 59
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	eb e3       	ldi	r30, 0x3B	; 59
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_u8SetPinValue+0x88>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_u8SetPinValue+0x84>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	bf c0       	rjmp	.+382    	; 0x1050 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
     ed2:	a8 e3       	ldi	r26, 0x38	; 56
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e3       	ldi	r30, 0x38	; 56
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8SetPinValue+0xb0>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8SetPinValue+0xac>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	ab c0       	rjmp	.+342    	; 0x1050 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
     efa:	a5 e3       	ldi	r26, 0x35	; 53
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e5 e3       	ldi	r30, 0x35	; 53
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_u8SetPinValue+0xd8>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_u8SetPinValue+0xd4>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	97 c0       	rjmp	.+302    	; 0x1050 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
     f22:	a2 e3       	ldi	r26, 0x32	; 50
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e2 e3       	ldi	r30, 0x32	; 50
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_u8SetPinValue+0x100>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_u8SetPinValue+0xfc>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	83 c0       	rjmp	.+262    	; 0x1050 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	89 83       	std	Y+1, r24	; 0x01
     f4e:	80 c0       	rjmp	.+256    	; 0x1050 <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value==DIO_u8PIN_LOW)
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	88 23       	and	r24, r24
     f54:	09 f0       	breq	.+2      	; 0xf58 <DIO_u8SetPinValue+0x118>
     f56:	77 c0       	rjmp	.+238    	; 0x1046 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3e 83       	std	Y+6, r19	; 0x06
     f60:	2d 83       	std	Y+5, r18	; 0x05
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	91 05       	cpc	r25, r1
     f6a:	59 f1       	breq	.+86     	; 0xfc2 <DIO_u8SetPinValue+0x182>
     f6c:	2d 81       	ldd	r18, Y+5	; 0x05
     f6e:	3e 81       	ldd	r19, Y+6	; 0x06
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	2c f4       	brge	.+10     	; 0xf80 <DIO_u8SetPinValue+0x140>
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	69 f0       	breq	.+26     	; 0xf98 <DIO_u8SetPinValue+0x158>
     f7e:	60 c0       	rjmp	.+192    	; 0x1040 <DIO_u8SetPinValue+0x200>
     f80:	2d 81       	ldd	r18, Y+5	; 0x05
     f82:	3e 81       	ldd	r19, Y+6	; 0x06
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	89 f1       	breq	.+98     	; 0xfec <DIO_u8SetPinValue+0x1ac>
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	83 30       	cpi	r24, 0x03	; 3
     f90:	91 05       	cpc	r25, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <DIO_u8SetPinValue+0x156>
     f94:	40 c0       	rjmp	.+128    	; 0x1016 <DIO_u8SetPinValue+0x1d6>
     f96:	54 c0       	rjmp	.+168    	; 0x1040 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
     f98:	ab e3       	ldi	r26, 0x3B	; 59
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_u8SetPinValue+0x176>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_u8SetPinValue+0x172>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	47 c0       	rjmp	.+142    	; 0x1050 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinValue+0x1a0>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinValue+0x19c>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	32 c0       	rjmp	.+100    	; 0x1050 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e3       	ldi	r30, 0x35	; 53
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8SetPinValue+0x1ca>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_u8SetPinValue+0x1c6>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	1d c0       	rjmp	.+58     	; 0x1050 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1016:	a2 e3       	ldi	r26, 0x32	; 50
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_u8SetPinValue+0x1f4>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_u8SetPinValue+0x1f0>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <DIO_u8SetPinValue+0x210>
			default : Local_u8ErrorState=NOK;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=NOK;
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=NOK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	28 96       	adiw	r28, 0x08	; 8
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue     (u8 Copy_u8Port, u8 Copy_u8Value)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <DIO_u8SetPortValue+0x6>
    106a:	00 d0       	rcall	.+0      	; 0x106c <DIO_u8SetPortValue+0x8>
    106c:	0f 92       	push	r0
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=OK;
    1076:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3d 83       	std	Y+5, r19	; 0x05
    1080:	2c 83       	std	Y+4, r18	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	91 05       	cpc	r25, r1
    108a:	d1 f0       	breq	.+52     	; 0x10c0 <DIO_u8SetPortValue+0x5c>
    108c:	2c 81       	ldd	r18, Y+4	; 0x04
    108e:	3d 81       	ldd	r19, Y+5	; 0x05
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	2c f4       	brge	.+10     	; 0x10a0 <DIO_u8SetPortValue+0x3c>
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	9d 81       	ldd	r25, Y+5	; 0x05
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	61 f0       	breq	.+24     	; 0x10b6 <DIO_u8SetPortValue+0x52>
    109e:	1f c0       	rjmp	.+62     	; 0x10de <DIO_u8SetPortValue+0x7a>
    10a0:	2c 81       	ldd	r18, Y+4	; 0x04
    10a2:	3d 81       	ldd	r19, Y+5	; 0x05
    10a4:	22 30       	cpi	r18, 0x02	; 2
    10a6:	31 05       	cpc	r19, r1
    10a8:	81 f0       	breq	.+32     	; 0x10ca <DIO_u8SetPortValue+0x66>
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	81 f0       	breq	.+32     	; 0x10d4 <DIO_u8SetPortValue+0x70>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA: PORTA=Copy_u8Value; break;
    10b6:	eb e3       	ldi	r30, 0x3B	; 59
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	80 83       	st	Z, r24
    10be:	11 c0       	rjmp	.+34     	; 0x10e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB: PORTB=Copy_u8Value; break;
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	80 83       	st	Z, r24
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC: PORTC=Copy_u8Value; break;
    10ca:	e5 e3       	ldi	r30, 0x35	; 53
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	80 83       	st	Z, r24
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD: PORTD=Copy_u8Value; break;
    10d4:	e2 e3       	ldi	r30, 0x32	; 50
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	80 83       	st	Z, r24
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_u8SetPortValue+0x7e>
	default : Local_u8ErrorState=NOK;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue      (u8 Copy_u8Port, u8 Copy_u8Pin , u8 *Copy_pu8Value)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	27 97       	sbiw	r28, 0x07	; 7
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	de bf       	out	0x3e, r29	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	cd bf       	out	0x3d, r28	; 61
    1108:	8a 83       	std	Y+2, r24	; 0x02
    110a:	6b 83       	std	Y+3, r22	; 0x03
    110c:	5d 83       	std	Y+5, r21	; 0x05
    110e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
    1110:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin<=DIO_u8PIN7))
    1112:	8c 81       	ldd	r24, Y+4	; 0x04
    1114:	9d 81       	ldd	r25, Y+5	; 0x05
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	09 f4       	brne	.+2      	; 0x111c <DIO_u8GetPinValue+0x28>
    111a:	77 c0       	rjmp	.+238    	; 0x120a <DIO_u8GetPinValue+0x116>
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	08 f0       	brcs	.+2      	; 0x1124 <DIO_u8GetPinValue+0x30>
    1122:	73 c0       	rjmp	.+230    	; 0x120a <DIO_u8GetPinValue+0x116>
	{
		switch (Copy_u8Port)
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3f 83       	std	Y+7, r19	; 0x07
    112c:	2e 83       	std	Y+6, r18	; 0x06
    112e:	4e 81       	ldd	r20, Y+6	; 0x06
    1130:	5f 81       	ldd	r21, Y+7	; 0x07
    1132:	41 30       	cpi	r20, 0x01	; 1
    1134:	51 05       	cpc	r21, r1
    1136:	59 f1       	breq	.+86     	; 0x118e <DIO_u8GetPinValue+0x9a>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	91 05       	cpc	r25, r1
    1140:	34 f4       	brge	.+12     	; 0x114e <DIO_u8GetPinValue+0x5a>
    1142:	2e 81       	ldd	r18, Y+6	; 0x06
    1144:	3f 81       	ldd	r19, Y+7	; 0x07
    1146:	21 15       	cp	r18, r1
    1148:	31 05       	cpc	r19, r1
    114a:	69 f0       	breq	.+26     	; 0x1166 <DIO_u8GetPinValue+0x72>
    114c:	5c c0       	rjmp	.+184    	; 0x1206 <DIO_u8GetPinValue+0x112>
    114e:	4e 81       	ldd	r20, Y+6	; 0x06
    1150:	5f 81       	ldd	r21, Y+7	; 0x07
    1152:	42 30       	cpi	r20, 0x02	; 2
    1154:	51 05       	cpc	r21, r1
    1156:	79 f1       	breq	.+94     	; 0x11b6 <DIO_u8GetPinValue+0xc2>
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_u8GetPinValue+0x70>
    1162:	3d c0       	rjmp	.+122    	; 0x11de <DIO_u8GetPinValue+0xea>
    1164:	50 c0       	rjmp	.+160    	; 0x1206 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: *Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1166:	e9 e3       	ldi	r30, 0x39	; 57
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a9 01       	movw	r20, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8GetPinValue+0x8a>
    117a:	55 95       	asr	r21
    117c:	47 95       	ror	r20
    117e:	8a 95       	dec	r24
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8GetPinValue+0x86>
    1182:	ca 01       	movw	r24, r20
    1184:	81 70       	andi	r24, 0x01	; 1
    1186:	ec 81       	ldd	r30, Y+4	; 0x04
    1188:	fd 81       	ldd	r31, Y+5	; 0x05
    118a:	80 83       	st	Z, r24
    118c:	3e c0       	rjmp	.+124    	; 0x120a <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTB: *Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    118e:	e6 e3       	ldi	r30, 0x36	; 54
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a9 01       	movw	r20, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8GetPinValue+0xb2>
    11a2:	55 95       	asr	r21
    11a4:	47 95       	ror	r20
    11a6:	8a 95       	dec	r24
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8GetPinValue+0xae>
    11aa:	ca 01       	movw	r24, r20
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	ec 81       	ldd	r30, Y+4	; 0x04
    11b0:	fd 81       	ldd	r31, Y+5	; 0x05
    11b2:	80 83       	st	Z, r24
    11b4:	2a c0       	rjmp	.+84     	; 0x120a <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTC: *Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    11b6:	e3 e3       	ldi	r30, 0x33	; 51
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_u8GetPinValue+0xda>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_u8GetPinValue+0xd6>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	ec 81       	ldd	r30, Y+4	; 0x04
    11d8:	fd 81       	ldd	r31, Y+5	; 0x05
    11da:	80 83       	st	Z, r24
    11dc:	16 c0       	rjmp	.+44     	; 0x120a <DIO_u8GetPinValue+0x116>
		case DIO_u8PORTD: *Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    11de:	e0 e3       	ldi	r30, 0x30	; 48
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 2f       	mov	r24, r24
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_u8GetPinValue+0x102>
    11f2:	55 95       	asr	r21
    11f4:	47 95       	ror	r20
    11f6:	8a 95       	dec	r24
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_u8GetPinValue+0xfe>
    11fa:	ca 01       	movw	r24, r20
    11fc:	81 70       	andi	r24, 0x01	; 1
    11fe:	ec 81       	ldd	r30, Y+4	; 0x04
    1200:	fd 81       	ldd	r31, Y+5	; 0x05
    1202:	80 83       	st	Z, r24
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_u8GetPinValue+0x116>
		default : Local_u8ErrorState=NOK;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState ;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
}
    120c:	27 96       	adiw	r28, 0x07	; 7
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	a2 97       	sbiw	r28, 0x22	; 34
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ColIdx , Local_u8RowIdx , Local_u8PressedKey=NO_PRESSED_KEY,Local_u8PinState;
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_KPDArr[ROW_NUMBER][COULMN_NUMBER]=KPD_BUTTONS_VAL;
    1236:	ce 01       	movw	r24, r28
    1238:	05 96       	adiw	r24, 0x05	; 5
    123a:	9f 8f       	std	Y+31, r25	; 0x1f
    123c:	8e 8f       	std	Y+30, r24	; 0x1e
    123e:	ed e7       	ldi	r30, 0x7D	; 125
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	f9 a3       	std	Y+33, r31	; 0x21
    1244:	e8 a3       	std	Y+32, r30	; 0x20
    1246:	f0 e1       	ldi	r31, 0x10	; 16
    1248:	fa a3       	std	Y+34, r31	; 0x22
    124a:	e8 a1       	ldd	r30, Y+32	; 0x20
    124c:	f9 a1       	ldd	r31, Y+33	; 0x21
    124e:	00 80       	ld	r0, Z
    1250:	88 a1       	ldd	r24, Y+32	; 0x20
    1252:	99 a1       	ldd	r25, Y+33	; 0x21
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	99 a3       	std	Y+33, r25	; 0x21
    1258:	88 a3       	std	Y+32, r24	; 0x20
    125a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    125c:	ff 8d       	ldd	r31, Y+31	; 0x1f
    125e:	00 82       	st	Z, r0
    1260:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1262:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	9f 8f       	std	Y+31, r25	; 0x1f
    1268:	8e 8f       	std	Y+30, r24	; 0x1e
    126a:	9a a1       	ldd	r25, Y+34	; 0x22
    126c:	91 50       	subi	r25, 0x01	; 1
    126e:	9a a3       	std	Y+34, r25	; 0x22
    1270:	ea a1       	ldd	r30, Y+34	; 0x22
    1272:	ee 23       	and	r30, r30
    1274:	51 f7       	brne	.-44     	; 0x124a <KPD_u8GetPressedKey+0x2c>
	u8 Local_COLArr[COULMN_NUMBER]={COULMN_PIN0,COULMN_PIN1,COULMN_PIN2,COULMN_PIN3};
    1276:	1d 8a       	std	Y+21, r1	; 0x15
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	8e 8b       	std	Y+22, r24	; 0x16
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	8f 8b       	std	Y+23, r24	; 0x17
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	88 8f       	std	Y+24, r24	; 0x18
	u8 Local_ROWArr[ROW_NUMBER]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	89 8f       	std	Y+25, r24	; 0x19
    1288:	85 e0       	ldi	r24, 0x05	; 5
    128a:	8a 8f       	std	Y+26, r24	; 0x1a
    128c:	86 e0       	ldi	r24, 0x06	; 6
    128e:	8b 8f       	std	Y+27, r24	; 0x1b
    1290:	87 e0       	ldi	r24, 0x07	; 7
    1292:	8c 8f       	std	Y+28, r24	; 0x1c

	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
    1294:	1b 82       	std	Y+3, r1	; 0x03
    1296:	76 c0       	rjmp	.+236    	; 0x1384 <KPD_u8GetPressedKey+0x166>
	{
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_LOW);
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ce 01       	movw	r24, r28
    12a0:	45 96       	adiw	r24, 0x15	; 21
    12a2:	fc 01       	movw	r30, r24
    12a4:	e2 0f       	add	r30, r18
    12a6:	f3 1f       	adc	r31, r19
    12a8:	90 81       	ld	r25, Z
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	69 2f       	mov	r22, r25
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>


		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUMBER;Local_u8RowIdx++)
    12b4:	1a 82       	std	Y+2, r1	; 0x02
    12b6:	51 c0       	rjmp	.+162    	; 0x135a <KPD_u8GetPressedKey+0x13c>
		{
			DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	ce 01       	movw	r24, r28
    12c0:	49 96       	adiw	r24, 0x19	; 25
    12c2:	fc 01       	movw	r30, r24
    12c4:	e2 0f       	add	r30, r18
    12c6:	f3 1f       	adc	r31, r19
    12c8:	90 81       	ld	r25, Z
    12ca:	9e 01       	movw	r18, r28
    12cc:	2c 5f       	subi	r18, 0xFC	; 252
    12ce:	3f 4f       	sbci	r19, 0xFF	; 255
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	69 2f       	mov	r22, r25
    12d4:	a9 01       	movw	r20, r18
    12d6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_u8GetPinValue>


			if(Local_u8PinState==DIO_u8PIN_LOW)
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	88 23       	and	r24, r24
    12de:	d1 f5       	brne	.+116    	; 0x1354 <KPD_u8GetPressedKey+0x136>
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <KPD_u8GetPressedKey+0xe6>
			{
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	ce 01       	movw	r24, r28
    12ea:	49 96       	adiw	r24, 0x19	; 25
    12ec:	fc 01       	movw	r30, r24
    12ee:	e2 0f       	add	r30, r18
    12f0:	f3 1f       	adc	r31, r19
    12f2:	90 81       	ld	r25, Z
    12f4:	9e 01       	movw	r18, r28
    12f6:	2c 5f       	subi	r18, 0xFC	; 252
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	69 2f       	mov	r22, r25
    12fe:	a9 01       	movw	r20, r18
    1300:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <DIO_u8GetPinValue>
			DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);


			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				while(Local_u8PinState==DIO_u8PIN_LOW)
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	88 23       	and	r24, r24
    1308:	61 f3       	breq	.-40     	; 0x12e2 <KPD_u8GetPressedKey+0xc4>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_ROWArr[Local_u8RowIdx],&Local_u8PinState);
				}
				Local_u8PressedKey=Local_KPDArr[Local_u8RowIdx][Local_u8ColIdx];
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	48 2f       	mov	r20, r24
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	22 0f       	add	r18, r18
    131c:	33 1f       	adc	r19, r19
    131e:	ce 01       	movw	r24, r28
    1320:	01 96       	adiw	r24, 0x01	; 1
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	84 0f       	add	r24, r20
    1328:	95 1f       	adc	r25, r21
    132a:	fc 01       	movw	r30, r24
    132c:	34 96       	adiw	r30, 0x04	; 4
    132e:	80 81       	ld	r24, Z
    1330:	89 83       	std	Y+1, r24	; 0x01
				DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	ce 01       	movw	r24, r28
    133a:	45 96       	adiw	r24, 0x15	; 21
    133c:	fc 01       	movw	r30, r24
    133e:	e2 0f       	add	r30, r18
    1340:	f3 1f       	adc	r31, r19
    1342:	90 81       	ld	r25, Z
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	69 2f       	mov	r22, r25
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
				return Local_u8PressedKey;
    134e:	f9 81       	ldd	r31, Y+1	; 0x01
    1350:	fd 8f       	std	Y+29, r31	; 0x1d
    1352:	1e c0       	rjmp	.+60     	; 0x1390 <KPD_u8GetPressedKey+0x172>
	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
	{
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_LOW);


		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUMBER;Local_u8RowIdx++)
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	8a 83       	std	Y+2, r24	; 0x02
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	84 30       	cpi	r24, 0x04	; 4
    135e:	08 f4       	brcc	.+2      	; 0x1362 <KPD_u8GetPressedKey+0x144>
    1360:	ab cf       	rjmp	.-170    	; 0x12b8 <KPD_u8GetPressedKey+0x9a>
				Local_u8PressedKey=Local_KPDArr[Local_u8RowIdx][Local_u8ColIdx];
				DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
				return Local_u8PressedKey;
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	ce 01       	movw	r24, r28
    136a:	45 96       	adiw	r24, 0x15	; 21
    136c:	fc 01       	movw	r30, r24
    136e:	e2 0f       	add	r30, r18
    1370:	f3 1f       	adc	r31, r19
    1372:	90 81       	ld	r25, Z
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	69 2f       	mov	r22, r25
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
	u8 Local_u8ColIdx , Local_u8RowIdx , Local_u8PressedKey=NO_PRESSED_KEY,Local_u8PinState;
	u8 Local_KPDArr[ROW_NUMBER][COULMN_NUMBER]=KPD_BUTTONS_VAL;
	u8 Local_COLArr[COULMN_NUMBER]={COULMN_PIN0,COULMN_PIN1,COULMN_PIN2,COULMN_PIN3};
	u8 Local_ROWArr[ROW_NUMBER]={ROW_PIN0,ROW_PIN1,ROW_PIN2,ROW_PIN3};

	for(Local_u8ColIdx=0;Local_u8ColIdx<COULMN_NUMBER;Local_u8ColIdx++)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	08 f4       	brcc	.+2      	; 0x138c <KPD_u8GetPressedKey+0x16e>
    138a:	86 cf       	rjmp	.-244    	; 0x1298 <KPD_u8GetPressedKey+0x7a>
			}
		}
		DIO_u8SetPinValue(KPD_PORT,Local_COLArr[Local_u8ColIdx],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	8d 8f       	std	Y+29, r24	; 0x1d
    1390:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1392:	a2 96       	adiw	r28, 0x22	; 34
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <CLCD_voidSendCommand>:
#include"CLCD_config.h"



void CLCD_voidSendCommand (u8 Copy_u8Command)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	2f 97       	sbiw	r28, 0x0f	; 15
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	65 e0       	ldi	r22, 0x05	; 5
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	66 e0       	ldi	r22, 0x06	; 6
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    13d2:	0e 94 32 08 	call	0x1064	; 0x1064 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	67 e0       	ldi	r22, 0x07	; 7
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a0 e0       	ldi	r26, 0x00	; 0
    13e6:	b0 e4       	ldi	r27, 0x40	; 64
    13e8:	8b 87       	std	Y+11, r24	; 0x0b
    13ea:	9c 87       	std	Y+12, r25	; 0x0c
    13ec:	ad 87       	std	Y+13, r26	; 0x0d
    13ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	4a ef       	ldi	r20, 0xFA	; 250
    13fe:	54 e4       	ldi	r21, 0x44	; 68
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	8f 83       	std	Y+7, r24	; 0x07
    140a:	98 87       	std	Y+8, r25	; 0x08
    140c:	a9 87       	std	Y+9, r26	; 0x09
    140e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1410:	6f 81       	ldd	r22, Y+7	; 0x07
    1412:	78 85       	ldd	r23, Y+8	; 0x08
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	9a 85       	ldd	r25, Y+10	; 0x0a
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	5f e3       	ldi	r21, 0x3F	; 63
    1420:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1424:	88 23       	and	r24, r24
    1426:	2c f4       	brge	.+10     	; 0x1432 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
    1430:	3f c0       	rjmp	.+126    	; 0x14b0 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	4f e7       	ldi	r20, 0x7F	; 127
    1440:	57 e4       	ldi	r21, 0x47	; 71
    1442:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1446:	18 16       	cp	r1, r24
    1448:	4c f5       	brge	.+82     	; 0x149c <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144a:	6b 85       	ldd	r22, Y+11	; 0x0b
    144c:	7c 85       	ldd	r23, Y+12	; 0x0c
    144e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1450:	9e 85       	ldd	r25, Y+14	; 0x0e
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	0f c0       	rjmp	.+30     	; 0x1492 <CLCD_voidSendCommand+0xee>
    1474:	88 ec       	ldi	r24, 0xC8	; 200
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <CLCD_voidSendCommand+0xdc>
    1484:	9c 83       	std	Y+4, r25	; 0x04
    1486:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	69 f7       	brne	.-38     	; 0x1474 <CLCD_voidSendCommand+0xd0>
    149a:	14 c0       	rjmp	.+40     	; 0x14c4 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	8d 83       	std	Y+5, r24	; 0x05
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <CLCD_voidSendCommand+0x118>
    14c0:	9a 83       	std	Y+2, r25	; 0x02
    14c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	67 e0       	ldi	r22, 0x07	; 7
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
}
    14ce:	2f 96       	adiw	r28, 0x0f	; 15
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	cf 91       	pop	r28
    14dc:	df 91       	pop	r29
    14de:	08 95       	ret

000014e0 <CLCD_voidSendData>:
void CLCD_voidSendData (u8 Copy_u8Data)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
    14e8:	2f 97       	sbiw	r28, 0x0f	; 15
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	de bf       	out	0x3e, r29	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	cd bf       	out	0x3d, r28	; 61
    14f4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	65 e0       	ldi	r22, 0x05	; 5
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	66 e0       	ldi	r22, 0x06	; 6
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	6f 85       	ldd	r22, Y+15	; 0x0f
    150e:	0e 94 32 08 	call	0x1064	; 0x1064 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	67 e0       	ldi	r22, 0x07	; 7
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	a0 e0       	ldi	r26, 0x00	; 0
    1522:	b0 e4       	ldi	r27, 0x40	; 64
    1524:	8b 87       	std	Y+11, r24	; 0x0b
    1526:	9c 87       	std	Y+12, r25	; 0x0c
    1528:	ad 87       	std	Y+13, r26	; 0x0d
    152a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	4a ef       	ldi	r20, 0xFA	; 250
    153a:	54 e4       	ldi	r21, 0x44	; 68
    153c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	8f 83       	std	Y+7, r24	; 0x07
    1546:	98 87       	std	Y+8, r25	; 0x08
    1548:	a9 87       	std	Y+9, r26	; 0x09
    154a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    154c:	6f 81       	ldd	r22, Y+7	; 0x07
    154e:	78 85       	ldd	r23, Y+8	; 0x08
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e8       	ldi	r20, 0x80	; 128
    155a:	5f e3       	ldi	r21, 0x3F	; 63
    155c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1560:	88 23       	and	r24, r24
    1562:	2c f4       	brge	.+10     	; 0x156e <CLCD_voidSendData+0x8e>
		__ticks = 1;
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	3f c0       	rjmp	.+126    	; 0x15ec <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	3f ef       	ldi	r19, 0xFF	; 255
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	57 e4       	ldi	r21, 0x47	; 71
    157e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1582:	18 16       	cp	r1, r24
    1584:	4c f5       	brge	.+82     	; 0x15d8 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1586:	6b 85       	ldd	r22, Y+11	; 0x0b
    1588:	7c 85       	ldd	r23, Y+12	; 0x0c
    158a:	8d 85       	ldd	r24, Y+13	; 0x0d
    158c:	9e 85       	ldd	r25, Y+14	; 0x0e
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e2       	ldi	r20, 0x20	; 32
    1594:	51 e4       	ldi	r21, 0x41	; 65
    1596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	bc 01       	movw	r22, r24
    15a0:	cd 01       	movw	r24, r26
    15a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <CLCD_voidSendData+0xee>
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <CLCD_voidSendData+0xdc>
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	00 97       	sbiw	r24, 0x00	; 0
    15d4:	69 f7       	brne	.-38     	; 0x15b0 <CLCD_voidSendData+0xd0>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d8:	6f 81       	ldd	r22, Y+7	; 0x07
    15da:	78 85       	ldd	r23, Y+8	; 0x08
    15dc:	89 85       	ldd	r24, Y+9	; 0x09
    15de:	9a 85       	ldd	r25, Y+10	; 0x0a
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <CLCD_voidSendData+0x118>
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	67 e0       	ldi	r22, 0x07	; 7
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 20 07 	call	0xe40	; 0xe40 <DIO_u8SetPinValue>
}
    160a:	2f 96       	adiw	r28, 0x0f	; 15
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <CLCD_voidInit>:
void CLCD_voidInit     (void)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	2e 97       	sbiw	r28, 0x0e	; 14
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 e2       	ldi	r26, 0x20	; 32
    1636:	b2 e4       	ldi	r27, 0x42	; 66
    1638:	8b 87       	std	Y+11, r24	; 0x0b
    163a:	9c 87       	std	Y+12, r25	; 0x0c
    163c:	ad 87       	std	Y+13, r26	; 0x0d
    163e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1640:	6b 85       	ldd	r22, Y+11	; 0x0b
    1642:	7c 85       	ldd	r23, Y+12	; 0x0c
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	4a ef       	ldi	r20, 0xFA	; 250
    164e:	54 e4       	ldi	r21, 0x44	; 68
    1650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	8f 83       	std	Y+7, r24	; 0x07
    165a:	98 87       	std	Y+8, r25	; 0x08
    165c:	a9 87       	std	Y+9, r26	; 0x09
    165e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1660:	6f 81       	ldd	r22, Y+7	; 0x07
    1662:	78 85       	ldd	r23, Y+8	; 0x08
    1664:	89 85       	ldd	r24, Y+9	; 0x09
    1666:	9a 85       	ldd	r25, Y+10	; 0x0a
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	5f e3       	ldi	r21, 0x3F	; 63
    1670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1674:	88 23       	and	r24, r24
    1676:	2c f4       	brge	.+10     	; 0x1682 <CLCD_voidInit+0x66>
		__ticks = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	9e 83       	std	Y+6, r25	; 0x06
    167e:	8d 83       	std	Y+5, r24	; 0x05
    1680:	3f c0       	rjmp	.+126    	; 0x1700 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1682:	6f 81       	ldd	r22, Y+7	; 0x07
    1684:	78 85       	ldd	r23, Y+8	; 0x08
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	3f ef       	ldi	r19, 0xFF	; 255
    168e:	4f e7       	ldi	r20, 0x7F	; 127
    1690:	57 e4       	ldi	r21, 0x47	; 71
    1692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1696:	18 16       	cp	r1, r24
    1698:	4c f5       	brge	.+82     	; 0x16ec <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169a:	6b 85       	ldd	r22, Y+11	; 0x0b
    169c:	7c 85       	ldd	r23, Y+12	; 0x0c
    169e:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e2       	ldi	r20, 0x20	; 32
    16a8:	51 e4       	ldi	r21, 0x41	; 65
    16aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	bc 01       	movw	r22, r24
    16b4:	cd 01       	movw	r24, r26
    16b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ba:	dc 01       	movw	r26, r24
    16bc:	cb 01       	movw	r24, r22
    16be:	9e 83       	std	Y+6, r25	; 0x06
    16c0:	8d 83       	std	Y+5, r24	; 0x05
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <CLCD_voidInit+0xc6>
    16c4:	88 ec       	ldi	r24, 0xC8	; 200
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9c 83       	std	Y+4, r25	; 0x04
    16ca:	8b 83       	std	Y+3, r24	; 0x03
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	01 97       	sbiw	r24, 0x01	; 1
    16d2:	f1 f7       	brne	.-4      	; 0x16d0 <CLCD_voidInit+0xb4>
    16d4:	9c 83       	std	Y+4, r25	; 0x04
    16d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	69 f7       	brne	.-38     	; 0x16c4 <CLCD_voidInit+0xa8>
    16ea:	14 c0       	rjmp	.+40     	; 0x1714 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	9a 83       	std	Y+2, r25	; 0x02
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <CLCD_voidInit+0xf0>
    1710:	9a 83       	std	Y+2, r25	; 0x02
    1712:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);

	CLCD_voidSendCommand (0b00111000);
    1714:	88 e3       	ldi	r24, 0x38	; 56
    1716:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>
	CLCD_voidSendCommand (0b00001100);
    171a:	8c e0       	ldi	r24, 0x0C	; 12
    171c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>
	CLCD_voidSendCommand (1);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>

}
    1726:	2e 96       	adiw	r28, 0x0e	; 14
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <CLCD_voidGoToXY>:
void CLCD_voidGoToXY (u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	00 d0       	rcall	.+0      	; 0x173e <CLCD_voidGoToXY+0x6>
    173e:	0f 92       	push	r0
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	8a 83       	std	Y+2, r24	; 0x02
    1746:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAMAddress;

	Local_u8DDRAMAddress=0x40*Copy_u8YPos+Copy_u8XPos;
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	00 24       	eor	r0, r0
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	07 94       	ror	r0
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	07 94       	ror	r0
    175c:	98 2f       	mov	r25, r24
    175e:	80 2d       	mov	r24, r0
    1760:	98 2f       	mov	r25, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	89 0f       	add	r24, r25
    1766:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8DDRAMAddress+(1<<7));
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	80 58       	subi	r24, 0x80	; 128
    176c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>

}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <CLCD_voidWriteSpecialCharacter>:
void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern,u8 Copy_u8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	27 97       	sbiw	r28, 0x07	; 7
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	6d 83       	std	Y+5, r22	; 0x05
    1796:	4e 83       	std	Y+6, r20	; 0x06
    1798:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress,Local_u8Counter;

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	8a 83       	std	Y+2, r24	; 0x02

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	80 5c       	subi	r24, 0xC0	; 192
    17b2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    17b6:	19 82       	std	Y+1, r1	; 0x01
    17b8:	0e c0       	rjmp	.+28     	; 0x17d6 <CLCD_voidWriteSpecialCharacter+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	9c 81       	ldd	r25, Y+4	; 0x04
    17c4:	fc 01       	movw	r30, r24
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>

	Local_u8CGRAMAddress=Copy_u8PatternNumber *8;

	CLCD_voidSendCommand(Local_u8CGRAMAddress+64);

	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	8f 5f       	subi	r24, 0xFF	; 255
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	88 30       	cpi	r24, 0x08	; 8
    17da:	78 f3       	brcs	.-34     	; 0x17ba <CLCD_voidWriteSpecialCharacter+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    17dc:	8e 81       	ldd	r24, Y+6	; 0x06
    17de:	6f 81       	ldd	r22, Y+7	; 0x07
    17e0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <CLCD_voidGoToXY>
	CLCD_voidSendData(Copy_u8PatternNumber);
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>

}
    17ea:	27 96       	adiw	r28, 0x07	; 7
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <CLCD_voidWriteString>:




void CLCD_voidWriteString(u8* Local_u8String)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <CLCD_voidWriteString+0x6>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index = 0;
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	0e c0       	rjmp	.+28     	; 0x182c <CLCD_voidWriteString+0x30>
	while(Local_u8String[Local_u8Index] != '\0')
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	fc 01       	movw	r30, r24
    181c:	e2 0f       	add	r30, r18
    181e:	f3 1f       	adc	r31, r19
    1820:	80 81       	ld	r24, Z
    1822:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>
		Local_u8Index++;
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	89 83       	std	Y+1, r24	; 0x01


void CLCD_voidWriteString(u8* Local_u8String)
{
	u8 Local_u8Index = 0;
	while(Local_u8String[Local_u8Index] != '\0')
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	9b 81       	ldd	r25, Y+3	; 0x03
    1836:	fc 01       	movw	r30, r24
    1838:	e2 0f       	add	r30, r18
    183a:	f3 1f       	adc	r31, r19
    183c:	80 81       	ld	r24, Z
    183e:	88 23       	and	r24, r24
    1840:	39 f7       	brne	.-50     	; 0x1810 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidSendData(Local_u8String[Local_u8Index]);
		Local_u8Index++;
	}
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <ClCD_voidWriteInteger>:

void ClCD_voidWriteInteger(u16 Local_u16Number)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	67 97       	sbiw	r28, 0x17	; 23
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	9f 8b       	std	Y+23, r25	; 0x17
    1864:	8e 8b       	std	Y+22, r24	; 0x16
	u16 Local_u16NumberArr[10]={0};
    1866:	84 e1       	ldi	r24, 0x14	; 20
    1868:	fe 01       	movw	r30, r28
    186a:	32 96       	adiw	r30, 0x02	; 2
    186c:	df 01       	movw	r26, r30
    186e:	98 2f       	mov	r25, r24
    1870:	1d 92       	st	X+, r1
    1872:	9a 95       	dec	r25
    1874:	e9 f7       	brne	.-6      	; 0x1870 <ClCD_voidWriteInteger+0x22>
	u8 Local_u8Counter=0;
    1876:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u16Number==0)
    1878:	8e 89       	ldd	r24, Y+22	; 0x16
    187a:	9f 89       	ldd	r25, Y+23	; 0x17
    187c:	00 97       	sbiw	r24, 0x00	; 0
    187e:	49 f5       	brne	.+82     	; 0x18d2 <ClCD_voidWriteInteger+0x84>
	{
		CLCD_voidSendData('0');
    1880:	80 e3       	ldi	r24, 0x30	; 48
    1882:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>
    1886:	41 c0       	rjmp	.+130    	; 0x190a <ClCD_voidWriteInteger+0xbc>
		return;
	}
	while(Local_u16Number != 0)
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	e8 2f       	mov	r30, r24
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8e 89       	ldd	r24, Y+22	; 0x16
    1890:	9f 89       	ldd	r25, Y+23	; 0x17
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	b9 01       	movw	r22, r18
    1898:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    189c:	ac 01       	movw	r20, r24
    189e:	40 5d       	subi	r20, 0xD0	; 208
    18a0:	5f 4f       	sbci	r21, 0xFF	; 255
    18a2:	9f 01       	movw	r18, r30
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	ce 01       	movw	r24, r28
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	82 0f       	add	r24, r18
    18ae:	93 1f       	adc	r25, r19
    18b0:	fc 01       	movw	r30, r24
    18b2:	31 96       	adiw	r30, 0x01	; 1
    18b4:	51 83       	std	Z+1, r21	; 0x01
    18b6:	40 83       	st	Z, r20
		Local_u16Number=Local_u16Number/10;
    18b8:	8e 89       	ldd	r24, Y+22	; 0x16
    18ba:	9f 89       	ldd	r25, Y+23	; 0x17
    18bc:	2a e0       	ldi	r18, 0x0A	; 10
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	b9 01       	movw	r22, r18
    18c2:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    18c6:	cb 01       	movw	r24, r22
    18c8:	9f 8b       	std	Y+23, r25	; 0x17
    18ca:	8e 8b       	std	Y+22, r24	; 0x16
		Local_u8Counter++;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	8f 5f       	subi	r24, 0xFF	; 255
    18d0:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u16Number==0)
	{
		CLCD_voidSendData('0');
		return;
	}
	while(Local_u16Number != 0)
    18d2:	8e 89       	ldd	r24, Y+22	; 0x16
    18d4:	9f 89       	ldd	r25, Y+23	; 0x17
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	b9 f6       	brne	.-82     	; 0x1888 <ClCD_voidWriteInteger+0x3a>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <ClCD_voidWriteInteger+0xb6>
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	9c 01       	movw	r18, r24
    18e6:	22 0f       	add	r18, r18
    18e8:	33 1f       	adc	r19, r19
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	fc 01       	movw	r30, r24
    18f4:	31 96       	adiw	r30, 0x01	; 1
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>
		Local_u8Counter--;
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	81 50       	subi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
	{
		Local_u16NumberArr[Local_u8Counter]=Local_u16Number%10+'0';
		Local_u16Number=Local_u16Number/10;
		Local_u8Counter++;
	}
	while(Local_u8Counter !=0)
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	88 23       	and	r24, r24
    1908:	49 f7       	brne	.-46     	; 0x18dc <ClCD_voidWriteInteger+0x8e>
	{
		CLCD_voidSendData(Local_u16NumberArr[Local_u8Counter-1]);
		Local_u8Counter--;
	}

}
    190a:	67 96       	adiw	r28, 0x17	; 23
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <main>:
u16 Global_CalcArr[15];
u8 Global_u8Index=0;
u8 i=0;
u8 Result=0;
void main()
{
    191c:	0f 93       	push	r16
    191e:	1f 93       	push	r17
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	2e 97       	sbiw	r28, 0x0e	; 14
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
	PORT_voidInit();
    1934:	0e 94 a3 05 	call	0xb46	; 0xb46 <PORT_voidInit>
	CLCD_voidInit();
    1938:	0e 94 0e 0b 	call	0x161c	; 0x161c <CLCD_voidInit>

	while(1)
	{
		CLCD_voidSendCommand(1);
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>
		CLCD_voidWriteString("Enter Your");
    1942:	80 e6       	ldi	r24, 0x60	; 96
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CLCD_voidWriteString>
		CLCD_voidGoToXY(0,1);
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	61 e0       	ldi	r22, 0x01	; 1
    194e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <CLCD_voidGoToXY>
		CLCD_voidWriteString("Equation");
    1952:	8b e6       	ldi	r24, 0x6B	; 107
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CLCD_voidWriteString>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	aa ef       	ldi	r26, 0xFA	; 250
    1960:	b4 e4       	ldi	r27, 0x44	; 68
    1962:	8b 87       	std	Y+11, r24	; 0x0b
    1964:	9c 87       	std	Y+12, r25	; 0x0c
    1966:	ad 87       	std	Y+13, r26	; 0x0d
    1968:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	6b 85       	ldd	r22, Y+11	; 0x0b
    196c:	7c 85       	ldd	r23, Y+12	; 0x0c
    196e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1970:	9e 85       	ldd	r25, Y+14	; 0x0e
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a ef       	ldi	r20, 0xFA	; 250
    1978:	54 e4       	ldi	r21, 0x44	; 68
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	8f 83       	std	Y+7, r24	; 0x07
    1984:	98 87       	std	Y+8, r25	; 0x08
    1986:	a9 87       	std	Y+9, r26	; 0x09
    1988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	2c f4       	brge	.+10     	; 0x19ac <main+0x90>
		__ticks = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <main+0x10e>
	else if (__tmp > 65535)
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	4c f5       	brge	.+82     	; 0x1a16 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	0f c0       	rjmp	.+30     	; 0x1a0c <main+0xf0>
    19ee:	88 ec       	ldi	r24, 0xC8	; 200
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9c 83       	std	Y+4, r25	; 0x04
    19f4:	8b 83       	std	Y+3, r24	; 0x03
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <main+0xde>
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	69 f7       	brne	.-38     	; 0x19ee <main+0xd2>
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <main+0x11a>
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		CLCD_voidSendCommand(1);
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <CLCD_voidSendCommand>
		Flag=1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 7c 00 	sts	0x007C, r24
    1a4a:	e8 c1       	rjmp	.+976    	; 0x1e1c <main+0x500>
		while(Flag)
		{
			Global_u8PressedKey=KPD_u8GetPressedKey();
    1a4c:	0e 94 0f 09 	call	0x121e	; 0x121e <KPD_u8GetPressedKey>
    1a50:	80 93 8e 00 	sts	0x008E, r24
			if(Global_u8PressedKey!=0xff)
    1a54:	80 91 8e 00 	lds	r24, 0x008E
    1a58:	8f 3f       	cpi	r24, 0xFF	; 255
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <main+0x142>
    1a5c:	c0 c1       	rjmp	.+896    	; 0x1dde <main+0x4c2>
			{
				if(Global_u8PressedKey<10)
    1a5e:	80 91 8e 00 	lds	r24, 0x008E
    1a62:	8a 30       	cpi	r24, 0x0A	; 10
    1a64:	78 f5       	brcc	.+94     	; 0x1ac4 <main+0x1a8>
				{
					ClCD_voidWriteInteger(Global_u8PressedKey);
    1a66:	80 91 8e 00 	lds	r24, 0x008E
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 27 0c 	call	0x184e	; 0x184e <ClCD_voidWriteInteger>
					Global_CalcArr[Global_u8Index]=Global_u8PressedKey+Global_CalcArr[Global_u8Index]*10;
    1a72:	80 91 8f 00 	lds	r24, 0x008F
    1a76:	68 2f       	mov	r22, r24
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	80 91 8e 00 	lds	r24, 0x008E
    1a7e:	48 2f       	mov	r20, r24
    1a80:	50 e0       	ldi	r21, 0x00	; 0
    1a82:	80 91 8f 00 	lds	r24, 0x008F
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	fc 01       	movw	r30, r24
    1a90:	ee 56       	subi	r30, 0x6E	; 110
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	80 81       	ld	r24, Z
    1a96:	91 81       	ldd	r25, Z+1	; 0x01
    1a98:	9c 01       	movw	r18, r24
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	c9 01       	movw	r24, r18
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	82 0f       	add	r24, r18
    1aaa:	93 1f       	adc	r25, r19
    1aac:	9a 01       	movw	r18, r20
    1aae:	28 0f       	add	r18, r24
    1ab0:	39 1f       	adc	r19, r25
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	fc 01       	movw	r30, r24
    1aba:	ee 56       	subi	r30, 0x6E	; 110
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	31 83       	std	Z+1, r19	; 0x01
    1ac0:	20 83       	st	Z, r18
    1ac2:	8d c1       	rjmp	.+794    	; 0x1dde <main+0x4c2>
				}
				else if(Global_u8PressedKey=='=')
    1ac4:	80 91 8e 00 	lds	r24, 0x008E
    1ac8:	8d 33       	cpi	r24, 0x3D	; 61
    1aca:	09 f0       	breq	.+2      	; 0x1ace <main+0x1b2>
    1acc:	6a c1       	rjmp	.+724    	; 0x1da2 <main+0x486>
				{
					for(i=1;i<=Global_u8Index;i+=2)
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 90 00 	sts	0x0090, r24
    1ad4:	b2 c0       	rjmp	.+356    	; 0x1c3a <main+0x31e>
					{

						if(Global_CalcArr[i]=='*')
    1ad6:	80 91 90 00 	lds	r24, 0x0090
    1ada:	88 2f       	mov	r24, r24
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	ee 56       	subi	r30, 0x6E	; 110
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	8a 32       	cpi	r24, 0x2A	; 42
    1aee:	91 05       	cpc	r25, r1
    1af0:	09 f0       	breq	.+2      	; 0x1af4 <main+0x1d8>
    1af2:	49 c0       	rjmp	.+146    	; 0x1b86 <main+0x26a>
						{
							Global_CalcArr[i+1]=Global_CalcArr[i-1]*Global_CalcArr[i+1];
    1af4:	80 91 90 00 	lds	r24, 0x0090
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	ac 01       	movw	r20, r24
    1afe:	4f 5f       	subi	r20, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255
    1b02:	80 91 90 00 	lds	r24, 0x0090
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	fc 01       	movw	r30, r24
    1b12:	ee 56       	subi	r30, 0x6E	; 110
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	20 81       	ld	r18, Z
    1b18:	31 81       	ldd	r19, Z+1	; 0x01
    1b1a:	80 91 90 00 	lds	r24, 0x0090
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	01 96       	adiw	r24, 0x01	; 1
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	fc 01       	movw	r30, r24
    1b2a:	ee 56       	subi	r30, 0x6E	; 110
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	b9 01       	movw	r22, r18
    1b34:	68 9f       	mul	r22, r24
    1b36:	90 01       	movw	r18, r0
    1b38:	69 9f       	mul	r22, r25
    1b3a:	30 0d       	add	r19, r0
    1b3c:	78 9f       	mul	r23, r24
    1b3e:	30 0d       	add	r19, r0
    1b40:	11 24       	eor	r1, r1
    1b42:	ca 01       	movw	r24, r20
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	fc 01       	movw	r30, r24
    1b4a:	ee 56       	subi	r30, 0x6E	; 110
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	31 83       	std	Z+1, r19	; 0x01
    1b50:	20 83       	st	Z, r18
							Global_CalcArr[i]='+';
    1b52:	80 91 90 00 	lds	r24, 0x0090
    1b56:	88 2f       	mov	r24, r24
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	fc 01       	movw	r30, r24
    1b60:	ee 56       	subi	r30, 0x6E	; 110
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	8b e2       	ldi	r24, 0x2B	; 43
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
							Global_CalcArr[i-1]=0;
    1b6c:	80 91 90 00 	lds	r24, 0x0090
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	ee 56       	subi	r30, 0x6E	; 110
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	11 82       	std	Z+1, r1	; 0x01
    1b82:	10 82       	st	Z, r1
    1b84:	55 c0       	rjmp	.+170    	; 0x1c30 <main+0x314>
						}
						else if(Global_CalcArr[i]=='/')
    1b86:	80 91 90 00 	lds	r24, 0x0090
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	fc 01       	movw	r30, r24
    1b94:	ee 56       	subi	r30, 0x6E	; 110
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	8f 32       	cpi	r24, 0x2F	; 47
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <main+0x288>
    1ba2:	46 c0       	rjmp	.+140    	; 0x1c30 <main+0x314>
						{
							Global_CalcArr[i+1]=Global_CalcArr[i-1]/Global_CalcArr[i+1];
    1ba4:	80 91 90 00 	lds	r24, 0x0090
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	8c 01       	movw	r16, r24
    1bae:	0f 5f       	subi	r16, 0xFF	; 255
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	80 91 90 00 	lds	r24, 0x0090
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	ee 56       	subi	r30, 0x6E	; 110
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	40 81       	ld	r20, Z
    1bc8:	51 81       	ldd	r21, Z+1	; 0x01
    1bca:	80 91 90 00 	lds	r24, 0x0090
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	fc 01       	movw	r30, r24
    1bda:	ee 56       	subi	r30, 0x6E	; 110
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	20 81       	ld	r18, Z
    1be0:	31 81       	ldd	r19, Z+1	; 0x01
    1be2:	ca 01       	movw	r24, r20
    1be4:	b9 01       	movw	r22, r18
    1be6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__udivmodhi4>
    1bea:	cb 01       	movw	r24, r22
    1bec:	9c 01       	movw	r18, r24
    1bee:	c8 01       	movw	r24, r16
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	ee 56       	subi	r30, 0x6E	; 110
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	31 83       	std	Z+1, r19	; 0x01
    1bfc:	20 83       	st	Z, r18
							Global_CalcArr[i]='+';
    1bfe:	80 91 90 00 	lds	r24, 0x0090
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	ee 56       	subi	r30, 0x6E	; 110
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	8b e2       	ldi	r24, 0x2B	; 43
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	91 83       	std	Z+1, r25	; 0x01
    1c16:	80 83       	st	Z, r24
							Global_CalcArr[i-1]=0;
    1c18:	80 91 90 00 	lds	r24, 0x0090
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	fc 01       	movw	r30, r24
    1c28:	ee 56       	subi	r30, 0x6E	; 110
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	11 82       	std	Z+1, r1	; 0x01
    1c2e:	10 82       	st	Z, r1
					ClCD_voidWriteInteger(Global_u8PressedKey);
					Global_CalcArr[Global_u8Index]=Global_u8PressedKey+Global_CalcArr[Global_u8Index]*10;
				}
				else if(Global_u8PressedKey=='=')
				{
					for(i=1;i<=Global_u8Index;i+=2)
    1c30:	80 91 90 00 	lds	r24, 0x0090
    1c34:	8e 5f       	subi	r24, 0xFE	; 254
    1c36:	80 93 90 00 	sts	0x0090, r24
    1c3a:	90 91 90 00 	lds	r25, 0x0090
    1c3e:	80 91 8f 00 	lds	r24, 0x008F
    1c42:	89 17       	cp	r24, r25
    1c44:	08 f0       	brcs	.+2      	; 0x1c48 <main+0x32c>
    1c46:	47 cf       	rjmp	.-370    	; 0x1ad6 <main+0x1ba>
							Global_CalcArr[i+1]=Global_CalcArr[i-1]/Global_CalcArr[i+1];
							Global_CalcArr[i]='+';
							Global_CalcArr[i-1]=0;
						}
					}
					for(i=1;i<=Global_u8Index;i+=2)
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	80 93 90 00 	sts	0x0090, r24
    1c4e:	8c c0       	rjmp	.+280    	; 0x1d68 <main+0x44c>
					{

						if(Global_CalcArr[i]=='+')
    1c50:	80 91 90 00 	lds	r24, 0x0090
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	ee 56       	subi	r30, 0x6E	; 110
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	8b 32       	cpi	r24, 0x2B	; 43
    1c68:	91 05       	cpc	r25, r1
    1c6a:	b1 f5       	brne	.+108    	; 0x1cd8 <main+0x3bc>
						{
							Global_CalcArr[i+1]=Global_CalcArr[i-1]+Global_CalcArr[i+1];
    1c6c:	80 91 90 00 	lds	r24, 0x0090
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	ac 01       	movw	r20, r24
    1c76:	4f 5f       	subi	r20, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	80 91 90 00 	lds	r24, 0x0090
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	fc 01       	movw	r30, r24
    1c8a:	ee 56       	subi	r30, 0x6E	; 110
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	20 81       	ld	r18, Z
    1c90:	31 81       	ldd	r19, Z+1	; 0x01
    1c92:	80 91 90 00 	lds	r24, 0x0090
    1c96:	88 2f       	mov	r24, r24
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	ee 56       	subi	r30, 0x6E	; 110
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	28 0f       	add	r18, r24
    1cac:	39 1f       	adc	r19, r25
    1cae:	ca 01       	movw	r24, r20
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	ee 56       	subi	r30, 0x6E	; 110
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	31 83       	std	Z+1, r19	; 0x01
    1cbc:	20 83       	st	Z, r18
							Global_CalcArr[i-1]=0;
    1cbe:	80 91 90 00 	lds	r24, 0x0090
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	fc 01       	movw	r30, r24
    1cce:	ee 56       	subi	r30, 0x6E	; 110
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	11 82       	std	Z+1, r1	; 0x01
    1cd4:	10 82       	st	Z, r1
    1cd6:	43 c0       	rjmp	.+134    	; 0x1d5e <main+0x442>
						}
						else if(Global_CalcArr[i]=='-')
    1cd8:	80 91 90 00 	lds	r24, 0x0090
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	ee 56       	subi	r30, 0x6E	; 110
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	80 81       	ld	r24, Z
    1cec:	91 81       	ldd	r25, Z+1	; 0x01
    1cee:	8d 32       	cpi	r24, 0x2D	; 45
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	a9 f5       	brne	.+106    	; 0x1d5e <main+0x442>
						{
							Global_CalcArr[i+1]=Global_CalcArr[i-1]-Global_CalcArr[i+1];
    1cf4:	80 91 90 00 	lds	r24, 0x0090
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	4f 5f       	subi	r20, 0xFF	; 255
    1d00:	5f 4f       	sbci	r21, 0xFF	; 255
    1d02:	80 91 90 00 	lds	r24, 0x0090
    1d06:	88 2f       	mov	r24, r24
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	fc 01       	movw	r30, r24
    1d12:	ee 56       	subi	r30, 0x6E	; 110
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	20 81       	ld	r18, Z
    1d18:	31 81       	ldd	r19, Z+1	; 0x01
    1d1a:	80 91 90 00 	lds	r24, 0x0090
    1d1e:	88 2f       	mov	r24, r24
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	01 96       	adiw	r24, 0x01	; 1
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	fc 01       	movw	r30, r24
    1d2a:	ee 56       	subi	r30, 0x6E	; 110
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	28 1b       	sub	r18, r24
    1d34:	39 0b       	sbc	r19, r25
    1d36:	ca 01       	movw	r24, r20
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	ee 56       	subi	r30, 0x6E	; 110
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	31 83       	std	Z+1, r19	; 0x01
    1d44:	20 83       	st	Z, r18
							Global_CalcArr[i-1]=0;
    1d46:	80 91 90 00 	lds	r24, 0x0090
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	fc 01       	movw	r30, r24
    1d56:	ee 56       	subi	r30, 0x6E	; 110
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	11 82       	std	Z+1, r1	; 0x01
    1d5c:	10 82       	st	Z, r1
							Global_CalcArr[i+1]=Global_CalcArr[i-1]/Global_CalcArr[i+1];
							Global_CalcArr[i]='+';
							Global_CalcArr[i-1]=0;
						}
					}
					for(i=1;i<=Global_u8Index;i+=2)
    1d5e:	80 91 90 00 	lds	r24, 0x0090
    1d62:	8e 5f       	subi	r24, 0xFE	; 254
    1d64:	80 93 90 00 	sts	0x0090, r24
    1d68:	90 91 90 00 	lds	r25, 0x0090
    1d6c:	80 91 8f 00 	lds	r24, 0x008F
    1d70:	89 17       	cp	r24, r25
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <main+0x45a>
    1d74:	6d cf       	rjmp	.-294    	; 0x1c50 <main+0x334>
						{
							Global_CalcArr[i+1]=Global_CalcArr[i-1]-Global_CalcArr[i+1];
							Global_CalcArr[i-1]=0;
						}
					}
					CLCD_voidGoToXY(0,1);
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	61 e0       	ldi	r22, 0x01	; 1
    1d7a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <CLCD_voidGoToXY>
					CLCD_voidSendData(Global_u8PressedKey);
    1d7e:	80 91 8e 00 	lds	r24, 0x008E
    1d82:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>
					ClCD_voidWriteInteger(Global_CalcArr[Global_u8Index]);
    1d86:	80 91 8f 00 	lds	r24, 0x008F
    1d8a:	88 2f       	mov	r24, r24
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	fc 01       	movw	r30, r24
    1d94:	ee 56       	subi	r30, 0x6E	; 110
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 81       	ld	r24, Z
    1d9a:	91 81       	ldd	r25, Z+1	; 0x01
    1d9c:	0e 94 27 0c 	call	0x184e	; 0x184e <ClCD_voidWriteInteger>
    1da0:	1e c0       	rjmp	.+60     	; 0x1dde <main+0x4c2>
				}
				else
				{
					CLCD_voidSendData(Global_u8PressedKey);
    1da2:	80 91 8e 00 	lds	r24, 0x008E
    1da6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <CLCD_voidSendData>
					Global_u8Index++;
    1daa:	80 91 8f 00 	lds	r24, 0x008F
    1dae:	8f 5f       	subi	r24, 0xFF	; 255
    1db0:	80 93 8f 00 	sts	0x008F, r24
					Global_CalcArr[Global_u8Index]=Global_u8PressedKey;
    1db4:	80 91 8f 00 	lds	r24, 0x008F
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	80 91 8e 00 	lds	r24, 0x008E
    1dc0:	48 2f       	mov	r20, r24
    1dc2:	50 e0       	ldi	r21, 0x00	; 0
    1dc4:	c9 01       	movw	r24, r18
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	fc 01       	movw	r30, r24
    1dcc:	ee 56       	subi	r30, 0x6E	; 110
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	51 83       	std	Z+1, r21	; 0x01
    1dd2:	40 83       	st	Z, r20
					Global_u8Index++;
    1dd4:	80 91 8f 00 	lds	r24, 0x008F
    1dd8:	8f 5f       	subi	r24, 0xFF	; 255
    1dda:	80 93 8f 00 	sts	0x008F, r24
				}
			}
			if(Global_u8PressedKey=='A')
    1dde:	80 91 8e 00 	lds	r24, 0x008E
    1de2:	81 34       	cpi	r24, 0x41	; 65
    1de4:	d9 f4       	brne	.+54     	; 0x1e1c <main+0x500>
			{
				Flag=0;
    1de6:	10 92 7c 00 	sts	0x007C, r1
				for(i=0;i<=Global_u8Index;i++)
    1dea:	10 92 90 00 	sts	0x0090, r1
    1dee:	10 c0       	rjmp	.+32     	; 0x1e10 <main+0x4f4>
				{
					Global_CalcArr[Global_u8Index]=0;
    1df0:	80 91 8f 00 	lds	r24, 0x008F
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	ee 56       	subi	r30, 0x6E	; 110
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	11 82       	std	Z+1, r1	; 0x01
    1e04:	10 82       	st	Z, r1
				}
			}
			if(Global_u8PressedKey=='A')
			{
				Flag=0;
				for(i=0;i<=Global_u8Index;i++)
    1e06:	80 91 90 00 	lds	r24, 0x0090
    1e0a:	8f 5f       	subi	r24, 0xFF	; 255
    1e0c:	80 93 90 00 	sts	0x0090, r24
    1e10:	90 91 90 00 	lds	r25, 0x0090
    1e14:	80 91 8f 00 	lds	r24, 0x008F
    1e18:	89 17       	cp	r24, r25
    1e1a:	50 f7       	brcc	.-44     	; 0x1df0 <main+0x4d4>
		CLCD_voidGoToXY(0,1);
		CLCD_voidWriteString("Equation");
		_delay_ms(2000);
		CLCD_voidSendCommand(1);
		Flag=1;
		while(Flag)
    1e1c:	80 91 7c 00 	lds	r24, 0x007C
    1e20:	88 23       	and	r24, r24
    1e22:	09 f0       	breq	.+2      	; 0x1e26 <main+0x50a>
    1e24:	13 ce       	rjmp	.-986    	; 0x1a4c <main+0x130>
    1e26:	8a cd       	rjmp	.-1260   	; 0x193c <main+0x20>

00001e28 <__udivmodhi4>:
    1e28:	aa 1b       	sub	r26, r26
    1e2a:	bb 1b       	sub	r27, r27
    1e2c:	51 e1       	ldi	r21, 0x11	; 17
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <__udivmodhi4_ep>

00001e30 <__udivmodhi4_loop>:
    1e30:	aa 1f       	adc	r26, r26
    1e32:	bb 1f       	adc	r27, r27
    1e34:	a6 17       	cp	r26, r22
    1e36:	b7 07       	cpc	r27, r23
    1e38:	10 f0       	brcs	.+4      	; 0x1e3e <__udivmodhi4_ep>
    1e3a:	a6 1b       	sub	r26, r22
    1e3c:	b7 0b       	sbc	r27, r23

00001e3e <__udivmodhi4_ep>:
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	5a 95       	dec	r21
    1e44:	a9 f7       	brne	.-22     	; 0x1e30 <__udivmodhi4_loop>
    1e46:	80 95       	com	r24
    1e48:	90 95       	com	r25
    1e4a:	bc 01       	movw	r22, r24
    1e4c:	cd 01       	movw	r24, r26
    1e4e:	08 95       	ret

00001e50 <__prologue_saves__>:
    1e50:	2f 92       	push	r2
    1e52:	3f 92       	push	r3
    1e54:	4f 92       	push	r4
    1e56:	5f 92       	push	r5
    1e58:	6f 92       	push	r6
    1e5a:	7f 92       	push	r7
    1e5c:	8f 92       	push	r8
    1e5e:	9f 92       	push	r9
    1e60:	af 92       	push	r10
    1e62:	bf 92       	push	r11
    1e64:	cf 92       	push	r12
    1e66:	df 92       	push	r13
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
    1e72:	df 93       	push	r29
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	ca 1b       	sub	r28, r26
    1e7a:	db 0b       	sbc	r29, r27
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	09 94       	ijmp

00001e88 <__epilogue_restores__>:
    1e88:	2a 88       	ldd	r2, Y+18	; 0x12
    1e8a:	39 88       	ldd	r3, Y+17	; 0x11
    1e8c:	48 88       	ldd	r4, Y+16	; 0x10
    1e8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e90:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e92:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e94:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e96:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e98:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e9a:	b9 84       	ldd	r11, Y+9	; 0x09
    1e9c:	c8 84       	ldd	r12, Y+8	; 0x08
    1e9e:	df 80       	ldd	r13, Y+7	; 0x07
    1ea0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ea2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ea4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ea6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ea8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eaa:	b9 81       	ldd	r27, Y+1	; 0x01
    1eac:	ce 0f       	add	r28, r30
    1eae:	d1 1d       	adc	r29, r1
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	de bf       	out	0x3e, r29	; 62
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	cd bf       	out	0x3d, r28	; 61
    1eba:	ed 01       	movw	r28, r26
    1ebc:	08 95       	ret

00001ebe <_exit>:
    1ebe:	f8 94       	cli

00001ec0 <__stop_program>:
    1ec0:	ff cf       	rjmp	.-2      	; 0x1ec0 <__stop_program>
